<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//move: left and right
move_speed=4 //range 1 to 10
//move: jump
max_jumps=1 //range 1 to 4
jump_speed=6 //range 5 to 10
jump_height=32*2+5 //in pixels
can_jump_at_start=true //true or false
//move: gravity
gravity_speed=5
max_gravity_speed=10 //range 1 to 20

//dont touch
jump=0 if!can_jump_at_start jump=max_jumps
jumping=false
jump_target=0
move_lock=false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement
//move: left and right
if!(keyboard_check(vk_left)&amp;&amp;keyboard_check(vk_right))&amp;&amp;!move_lock{
    if keyboard_check(vk_left)&amp;&amp;place_empty(x-move_speed,y)
    {x-=move_speed image_xscale=1}
    if keyboard_check(vk_right)&amp;&amp;place_empty(x+move_speed,y)
    {x+=move_speed image_xscale=-1}
}
//move: gravity
//if place_empty(x,y+gravity_speed) y+=gravity_speed else if place_empty(x,y+1) y+=1
gravity_speed=gravity_speed+0.6 if gravity_speed&gt;max_gravity_speed gravity_speed=max_gravity_speed
if place_empty(x,y+gravity_speed) y+=gravity_speed else if place_empty(x,y+1) y+=1
//move: jump
if keyboard_check_pressed(vk_up)&amp;&amp;!keyboard_check_pressed(vk_down)&amp;&amp;max_jumps&gt;jump
{jump++ jump_target=y-jump_height jump_origin=y jumping=true}
if jumping{
    y-=gravity_speed
    y=floor(smooth_max_movement(y,jump_target,y-jump_speed))
    if y&lt;=jump_target||!place_empty(x,y-1) jumping=false
}else if !place_empty(x,y+1){jump=0 gravity_speed=0}

//battle: spike dmg
if place_meeting(x,y,obj_spike){
    lft=place_empty(x-1,y-1) rht=place_empty(x+1,y-1)
    if!lft&amp;&amp;rht hspeed=2 else if !rht&amp;&amp;lft hspeed=-2
    else if(instance_place(x,y,obj_spike).x+16&lt;x)hspeed=2 else hspeed=-2
    vspeed=-4 move_lock=true
}

/*//move: gravity
/*if place_empty(x,y+1) gravity=0.5 
else {gravity=0 if vspeed&gt;=0{jump=0 move_lock=false}}*/
/*if place_empty(x,y+1)&amp;&amp;!jumping vspeed+=0.5
else if vspeed&gt;=0{jump=0 move_lock=false}
//move: floor collision
if place_meeting(x,y,obj_floor)&amp;&amp;!m_lft&amp;&amp;!m_rht
{y=instance_place(x,y,obj_floor).y hspeed=0 vspeed=0}
//move: jump
if keyboard_check_pressed(vk_up)&amp;&amp;!keyboard_check_pressed(vk_down)
    if max_jumps&gt;jump{vspeed=-jump_speed jump+=1 jump_height_target=y-jump_height jumping=true}
if y&lt;jump_height_target jumping=false
if vspeed&lt;0&amp;&amp;!place_empty(x,y-1)vspeed=1;
//move: limited speed
if hspeed&gt;10 hspeed=10 else if hspeed&lt;-10 hspeed=-10
if vspeed&gt;max_gravity_speed vspeed=max_gravity_speed 
else if vspeed&lt;-10 vspeed=-10
//battle: spike dmg
if place_meeting(x,y,obj_spike){
    lft=place_empty(x-1,y-1) rht=place_empty(x+1,y-1)
    if!lft&amp;&amp;rht hspeed=2 else if !rht&amp;&amp;lft hspeed=-2
    else if(instance_place(x,y,obj_spike).x+16&lt;x)hspeed=2 else hspeed=-2
    vspeed=-4 move_lock=true
}

if place_meeting(x,y,obj_floor)&amp;&amp;!m_lft&amp;&amp;!m_rht
{y=instance_place(x,y,obj_floor).y hspeed=0 vspeed=0}
*/

x=round(x)
y=round(y)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
